import java.sql.Statementimport java.util.regex.Matcherimport java.util.regex.Patternimport java.sql.ResultSetimport java.sql.Driverimport java.sql.DriverManagerimport java.sql.Connectionimport java.util.zip.ZipFileimport java.util.zip.ZipEntryimport TigerDefinitionimport TigerTableimport groovy.sql.Sqlimport org.apache.commons.lang.StringUtilsreturn; //comment out to run/** * the raw output has total=2627282 = 576M * with sort | uniq will cut it down to 2588852 = 566M */Config config = new Config()//return;  //comment out to runDriverManager.registerDriver((Driver)getClass().getClassLoader().loadClass(config.driverClass).newInstance())//this is calling a private method of DriverManager :D //because the maven classloader does not have the driver classConnection conn = DriverManager.getConnection(config.connectionString,     new Properties(), getClass().getClassLoader())    PrintStream ps = new PrintStream(new BufferedOutputStream(new FileOutputStream(/tiger_main.csv/)))    //t2 starts at long1Statement stmt = conn.createStatement()ResultSet rs = stmt.executeQuery("""select     TLID,    FEDIRP,    FENAME,    FETYPE,    FEDIRS,    FRADDL,    TOADDL,    FRADDR,    TOADDR,    ZIPL,    ZIPR,    FRLONG,    FRLAT,    TOLONG,    TOLAT,    LONG1,    LAT1,    LONG2,    LAT2,    LONG3,    LAT3,    LONG4,    LAT4,    LONG5,    LAT5,    LONG6,    LAT6,    LONG7,    LAT7,    LONG8,    LAT8,    LONG9,    LAT9,    LONG10,    LAT10     from tiger_main     """)int i =0;while(rs.next()){  i++    if(i%1000==0) println i  int j=1  ps.println([           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++),           rs.getString(j++)].join(','))}stmt.close()conn.close()rs.close()ps.close()println('total='+i)//tiger_main///* * create table tiger_main ( TLID  numeric  not null,FEDIRP  varchar(2)  ,FENAME  varchar(30)  ,FETYPE  varchar(4)  ,FEDIRS  varchar(2)  ,FRADDL  numeric  not null,TOADDL  numeric  not null,FRADDR  numeric  not null,TOADDR  numeric  not null,ZIPL  varchar(5)  ,ZIPR  varchar(5)  ,FRLONG  numeric  not null,FRLAT  numeric  not null,TOLONG  numeric  not null,TOLAT  numeric  not null,LONG1  numeric  not null,LAT1  numeric  not null,LONG2  numeric  ,LAT2  numeric  ,LONG3  numeric  ,LAT3  numeric  ,LONG4  numeric  ,LAT4  numeric  ,LONG5  numeric  ,LAT5  numeric  ,LONG6  numeric  ,LAT6  numeric  ,LONG7  numeric  ,LAT7  numeric  ,LONG8  numeric  ,LAT8  numeric  ,LONG9  numeric  ,LAT9  numeric  ,LONG10  numeric  ,LAT10  numeric  );             it.TLID,             it.FEDIRP,             it.FENAME,             it.FETYPE,             it.FEDIRS,             fraddl, fraddr, toaddl, toaddr,             it.ZIPL,             it.ZIPR,             it.FRLONG,             it.FRLAT,             it.TOLONG,             it.TOLAT,             it.LONG1,             it.LAT1,             it.LONG2,             it.LAT2,             it.LONG3,             it.LAT3,             it.LONG4,             it.LAT4,             it.LONG5,             it.LAT5,             it.LONG6,             it.LAT6,             it.LONG7,             it.LAT7,             it.LONG8,             it.LAT8,             it.LONG9,             it.LAT9,             it.LONG10,             it.LAT10 */