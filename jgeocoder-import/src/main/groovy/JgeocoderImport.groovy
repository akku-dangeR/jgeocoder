import java.sql.Driverimport java.sql.DriverManagerimport java.sql.Connectionimport java.util.zip.ZipFileimport java.util.zip.ZipEntryimport TigerDefinitionimport TigerTableimport groovy.sql.Sqlimport org.apache.commons.lang.StringUtils//return; //comment out to runConfig config = new Config()//return;  //comment out to runDriverManager.registerDriver((Driver)getClass().getClassLoader().loadClass(config.driverClass).newInstance())//this is calling a private method of DriverManager :D //because the maven classloader does not have the driver classConnection conn = DriverManager.getConnection(config.connectionString,     new Properties(), getClass().getClassLoader())def sqldb = new Sql(conn)if(config.cleanup)  cleanUp(sqldb)  init(sqldb) new File(config.tigerDataFiles).eachFileRecurse{  if(it.name ==~ /TGR.+\.ZIP/){    ZipFile f = new ZipFile(it)    def entries = f.entries()    def start = System.currentTimeMillis()    while(entries.hasMoreElements()){      processFile(sqldb, f, entries.nextElement())    }    println "total time = ${(System.currentTimeMillis() - start)/(1000*60)} minutes"  }}buildJoinTable(sqldb)sqldb.close()/////////////////helpers///////////////////////////////void buildJoinTable(def db){    try{    println 'creating index on tiger_1'    db.execute('create index idx1_tiger_1 on tiger_1 (tlid)')    println 'creating index on tiger_2'    db.execute('create index idx1_tiger_2 on tiger_2 (tlid)')    println 'building join table tiger_main of tiger_1 and tiger_2'    db.execute('''create table tiger_main as select t1.*,         t2.RTSQ,t2.LONG1,t2.LAT1,t2.LONG2,t2.LAT2,t2.LONG3,t2.LAT3,        t2.LONG4,t2.LAT4,t2.LONG5,t2.LAT5,t2.LONG6,t2.LAT6,t2.LONG7,        t2.LAT7,t2.LONG8,t2.LAT8,t2.LONG9,t2.LAT9,t2.LONG10,t2.LAT10          from tiger_1 t1 left outer join tiger_2 t2 on t1.tlid = t2.tlid''')//    println 'dropping idx1_tiger_1'//    db.execute('drop index idx1_tiger_1')//    println 'dropping idx1_tiger_2'//    db.execute('drop index idx1_tiger_2')//    cleanUp(db)//    println 'creating indicies on tiger_main'//    db.execute('create index idx0_tiger_main on tiger_main(tlid)')//    db.execute('create index idx1_tiger_main on tiger_main(fename)')//    db.execute('create index idx2_tiger_main on tiger_main(fraddL)')//    db.execute('create index idx3_tiger_main on tiger_main(toaddL)')//    db.execute('create index idx4_tiger_main on tiger_main(fraddR)')//    db.execute('create index idx5_tiger_main on tiger_main(toaddR)')//    db.execute('create index idx6_tiger_main on tiger_main(zipL)')//    db.execute('create index idx7_tiger_main on tiger_main(zipR)')  }catch (Exception e) {println e.message}}void cleanUp(def db){  println 'dropping all tiger line tables'  TigerDefinition.TIGER_TABLES.each{    try{ db.execute('drop table ' +it.name+' cascade constraints')}catch(Exception e){ println e.message }  }  }void init(def db){  println 'creating tiger line database schema'  TigerDefinition.TIGER_TABLES.each{    try{ db.execute(it.ddl)}catch(Exception e){ println e.message }  }}void processFile(def db, ZipFile f,  ZipEntry entry){  if(!entry.getName().toUpperCase().endsWith('RT1') && !entry.getName().toUpperCase().endsWith('RT2')){ return }  def reader = new BufferedReader(new InputStreamReader(f.getInputStream(entry)))  println 'importing '+entry.name  def ext = entry.name.substring(entry.name.lastIndexOf('.')+1)  if(ext == 'MET') return  def tableName = 'tiger_'+ext.toLowerCase().substring(2)  TigerTable table  TigerDefinition.TIGER_TABLES.each{    if(it.name == tableName) table = it  }    def col = [], q = []  table.columns.each{    col << it.name   }  col.size().times{    q << '?'  }  def insert = "insert into ${table.name} (${col.join(',')}) values (${q.join(',')})"  def total = 0, commit = 5000, error = 0//  def blah = new HashSet()  reader.eachLine{line ->    if(StringUtils.isBlank(line)) return        def colval = []        table.columns.each{ c ->      def val = line[c.range].trim()      if(val == ''){colval << null}      else{        if(val.startsWith('+')) val = val.substring(1)        val = StringUtils.upperCase(val)        if(c.name ==~ /(?i:^(?:lat|long)\d$)/ || c.name ==~ /(?i:^(?:fr|to)(?:lat|long)$)/){ //special parsing for lat/lon           val = Long.parseLong(val)/1000000; //blah<<c.name          colval << val        }else{          colval << (c.isNum ? Long.parseLong(val) : val)        }              }    }    try{db.execute insert, colval}catch(Exception e){       println 'Error inserting record: '+e.getMessage()      error++    }    total++    if(total%commit == 0){      println "commit point reached, total = $total"      db.commit()    }        }  db.commit()  println "inserted $total records to table ${table.name} from ${entry.name}"//  println blah  if(error > 0) println "there were $error errors"  }